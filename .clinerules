# Student Research Clubs Network Portal - Guidelines

## Overview
- Purpose: Centralized platform for HUST research club activities, events, and resources
- Core Features: Dynamic homepage, news, D3.js network visualization, schedules, resource sharing, Vietnamese support, CMS, member/club management

## Design
- Theme: Modern academic with traditional elements
- Colors: Cardinal Red (#CE1628), Navy Blue (#003366), Sunflower Yellow (#F3C108), Charcoal Gray (#232020)
- Typography: Sans-serif (main), serif (academic), geometric sans (innovation)
- Layout: Grid-based, clean cards, minimalist icons with traditional accents, network visualization

## Tech Stack
- Core: Svelte 5, SvelteKit 2.x, TypeScript 5.x, Vite 6.x, Bits UI
- Cloud: Cloudflare Pages, D1 (SQLite), R2 (storage), Images
- Styling: Tailwind CSS 4.x, lucide-svelte icons
- Database: Drizzle ORM
- Security: Oslo.js, Argon2id, Zod
- Content: TipTap, DOMPurify
- Visualization: D3.js v7

## Development Approach
- Progressive: Build in stages, pause after key components for review
- Scope: Implement only what’s requested; clarify ambiguity with minimal viable solutions
- Communication: Summarize completed work, classify changes (Small/Medium/Large), outline plans for Large changes

## Architecture
- Patterns: Repository (data), Store (state), Service (logic), Factory (objects), Observer (updates), Strategy (algorithms), Adapter (integration), Facade (simplicity)
- Principles: YAGNI (avoid unnecessary features), KISS (keep solutions simple)

## Business Logic
- CMS: Admin-only CRUD for all entities (users, clubs, events, resources, posts, etc.) via a WordPress-like interface
- Clubs: Manual creation/update of clubs and member roles (president, advisor, member) in `user_in_club`
- Resources: Admin uploads documents/presentations/videos/links to `resource`, stored in R2, accessible to all
- Events: Admin creates/updates events in `event`, tied to clubs, no recurring or external calendar sync
- Visualization: D3.js displays static club/member connections from D1 (`club`, `user_in_club`), no real-time updates
- Access: Admin-only content management; users view content without edit rights

## Svelte 5 Syntax
- Reactivity: Use `$state` for variables, `$derived` for computed values, `$effect` for side effects
- Props: Declare with `let { prop } = $props()`, use `$bindable()` for bindable props
- Events: Use `onclick` (not `on:click`), pass callbacks instead of `createEventDispatcher`
- Content: Use snippets (`{#snippet}`) and `{@render}` instead of slots
- Components: Instantiate with `mount`/`hydrate` (not `new`), avoid Svelte 4 class syntax
- Migration: Run `npx sv migrate svelte-5` for automation, manually adjust events and bindings

## Complex Implementation Tactics
- Break Down Components: Split large features (e.g., CMS forms, D3.js visualization) into smaller, reusable components (max 200 lines each)
- Layered Logic: Separate UI, business logic, and data access into distinct files (e.g., `cms.service.ts`, `club.repo.ts`)
- Incremental Builds: Implement complex features (e.g., network visualization) in stages—start with static data, add interactivity later
- Facade Pattern: Use a single entry point (e.g., `cmsFacade`) to simplify interactions with multiple subsystems
- Type Safety: Leverage TypeScript interfaces (e.g., `Club`, `Event`) from schema to catch errors early
- Mock Data: Test complex logic (e.g., visualization) with static JSON before integrating D1 queries
- Documentation: Add inline comments for complex flows (e.g., admin CRUD), keep external docs minimal
- Refactor Early: Simplify over-engineered code during review checkpoints, adhering to KISS

## Code Guidelines
- Use TypeScript with strict typing
- Follow SvelteKit conventions
- Keep components <200 lines
- Apply SOLID principles and DI
- Write self-documenting code with usage examples
- Separate business logic from UI
- Follow YAGNI and KISS to avoid over-engineering

## Styling
- Use Tailwind utilities
- Design mobile-first, responsive, dark mode
- Maintain consistent palette and spacing
- Theme Lucide icons

## Security
- Session auth (30-day expiry, 15-day renewal)
- Hash passwords with Argon2
- Implement role-based access (admin-only CMS)
- Sanitize and validate content

## Database
- Use schema in src/lib/server/db/schema.ts
- Write type-safe queries with Drizzle
- Optimize for visualization (e.g., `club`, `user_in_club`)

## Storage
- Store resources in Cloudflare R2
- Deliver images via Cloudflare Images
- Enforce secure uploads/access (admin-only)

## UI Components
- Build with Bits UI
- Ensure accessibility (ARIA)
- Integrate TipTap for rich text in CMS

## Quality & Testing
- Deliver testable increments
- Unit test business logic (e.g., CRUD operations)
- Integration test APIs
- Verify auth flows
- Note edge cases (e.g., duplicate slugs) and suggest tests

## Performance
- Minimize bundle size with code splitting
- Optimize data fetching/caching

## Vietnamese Support
- Use Vietnamese date/time formats

## Club Networking
- Structure: President, Advisors, Members (via `user_in_club`)
- Activities: Workshops, competitions, research (via `event`, `research`)